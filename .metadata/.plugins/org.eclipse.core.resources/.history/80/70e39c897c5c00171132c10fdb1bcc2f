package bitcamp.java93.control.json;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.ServletContext;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import bitcamp.java93.domain.Teacher;
import bitcamp.java93.service.TeacherService;

@RestController
@RequestMapping("/teacher/")
public class TeacherControl {
  @Autowired ServletContext servletContext;
  @Autowired TeacherService teacherService;


  @RequestMapping("list")
  public JsonResult list(
    @RequestParam(defaultValue="1")int pageNo,
    @RequestParam(defaultValue="100") int pageSize) throws Exception {

    return new JsonResult(JsonResult.SUCCESS, teacherService.list(pageNo, pageSize));
    
  }

  @RequestMapping("detail")
  public JsonResult detail(int no, Model model) throws Exception {
    Teacher teacher = teacherService.get(no);

    if (teacher == null) {
      return new JsonResult(JsonResult.FAIL, no + "번 강사가 없습니다.");
    }

    return new JsonResult(JsonResult.SUCCESS, teacher);
  }
  
  @RequestMapping("update")
  public String update(Teacher teacher,MultipartFile[] photo) throws Exception {
    teacher.setPhotoList(processMultipartFiles(photo));
    
    teacherService.update(teacher);
    
    return "redirect:list.do";
  }
  
  @RequestMapping("delete")
  public String delete(int no) throws Exception {
    teacherService.remove(no);
    return "redirect:list.do";
    
  }
  
  @RequestMapping("form")
  public void form() throws Exception {}
  
  @RequestMapping("add")
  public String add(Teacher teacher,MultipartFile[] photo) throws Exception {

    teacher.setPhotoList(processMultipartFiles(photo));
    teacherService.add(teacher);
    return "redirect:list.do";
  }
  
   private List<String> processMultipartFiles(MultipartFile[] files) throws Exception{
    ArrayList<String> photoList = new ArrayList<>();

    for (MultipartFile file: files) {
      if (file.isEmpty()) 
          continue;
      String  filename = getNewFilename();
      file.transferTo(new File(servletContext.getRealPath("/teacher/photo/" + filename)));
      photoList.add(filename);
    }
    return photoList;
   }
    
   
    int count = 0;
    synchronized private String getNewFilename() {
      if (count > 100) {
        count = 0;
      }
      return String.format("%d_%d" , System.currentTimeMillis(), ++count);
    }

}
