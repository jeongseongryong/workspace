package step02;


 class Student {
		String name;
		int[] scores;
		int total;
		float aver;

		Student(String name, int kor, int eng, int math){

			this.name = name;
			this.scores = new int[]{kor, eng, math};
			this.total = kor + eng + math;
			this.aver = this.total / 3f;
}
       
			public static void print(Student s){ 
				System.out.printf("%s,%d,%d,%d,%d, %.1f\n",
						s.name,
						s.scores[0],
						s.scores[1],
						s.scores[2],
						s.total, s.aver);	
	}
}
  
	public static void main(String[] args) {

      Student[] arr1  = new Student[3];
      
      //1)Student 클래스의 설계에 따라 인스턴스(메모리)를 준비
      //2)Student 클래스에 정의된 메서드 중에서 다음 네개의 값을 받을 수 있는 생성자를 호출
        //생성자를 호출 하지 않을수 있는가?  없다, 무조건 호출해야함
      //3)그리고 그 인스턴스 주소를 리턴
      arr1[0] = new Student("홍길동",100,100,100);
      arr1[1] = new Student("임꺽정",90,90,90);
      arr1[2] = new Student("유관순",80,80,80);
      /* createStudent() 매서드를 사용해도 괜찮았는데 왜 생성자를 사용하는가?
       * => 클래스와 관련된 코드는  그 클래스 함께 묶어두는것이 유지보수에 좋다
       * => 나중에 클래스 별로 별개의 파일로 분리할 떄 유리하다.
       *    유지 보수 입장에서는 코드를 관리하기 쉽다.
       * 
       */
      for(int i=0; i< arr1.length; i++) {
      	Student.printStudent(arr1[i]);
    }
  }